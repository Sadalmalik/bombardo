"BaseLang.brd"
;	Определения различного синтаксического сахара



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	Просто синтаксический сахар для краткости записи

(define defFunct (macros $sexp
	[define $head (car $sexp)]
	[define $name (car $head)]
	[define $args (cdr $head)]
	[define $body (cdr $sexp)]
	[set! $args (if (null? $args) empty $args)]
	(list `define $name
		(cons `lambda (cons $args $body))
	)
))

(define defMacro (macros $sexp
	[define $head (car $sexp)]
	[define $name (car $head)]
	[define $args (cdr $head)]
	[define $body (cdr $sexp)]
	[set! $args (if (null? $args) empty $args)]
	(list `define $name
		(cons `macros (cons $args $body))
	)
))

(export defFunct)
(export defMacro)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	Для тех, кому необходим этот стрёмный синтаксис
;	(let [(a 15)
;		  (b 'theta')
;		  (c omega)]
;		(expression1)
;		(expression2)
;		(expression3)
;	)
;	преобразуется в:
;	((lambda []
;		(define a 15)
;		(define b 'theta')
;		(define c omega)
;		(expression1)
;		(expression2)
;		(expression3)
;	))

(defMacro [let . $exp]
	(define $body
		(map (car $exp) (lambda [$item]
			(cons `define $item)
		)))
	(set-cdr! (last $body) (cdr $exp))
	(cons (cons `lambda (cons `[] $body)) null)
)

(export let)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	Кое-какие математические удобства
;	Прединкремент ++i
(defMacro [inc! variable]
	(list `set! variable (list `+ variable 1))
)

;	Преддекремент --i
(defMacro [dec! variable]
	(list `set! variable (list `- variable 1))
)

;	Предквадрат
(defMacro [sqr! variable]
	(list `set! variable (list `* variable variable))
)

;	Предквадратный корень
(defMacro [sqrt! variable]
	(list `set! variable (list `sqrt variable))
)

(export inc!)
(export dec!)
(export sqr!)
(export sqrt!)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	Оперирование путями внутри списковой структуры данных

;	Возвращает список всех существующих в данной структуре путей вида (car cdr cdr)
(defFunct	[BuildAllPaths $struct $path]
	(cond	[(null? $struct) null]
			[(pair? $struct)
				(append
					(BuildAllPaths (car $struct) (append $path (cons `car)) )
					(BuildAllPaths (cdr $struct) (append $path (cons `cdr)) ))]
			[true (cons $path)]
	)
)

;	Получает из структуры значение по указанному пути
(defFunct	[GetByPath $struct $path]
	(if		[null? $path]
			$struct
			(GetByPath (eval (list (car $path) `$struct)) (cdr $path))
	)
)

(export BuildAllPaths)
(export GetByPath)




