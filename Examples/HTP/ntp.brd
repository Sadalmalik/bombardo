"ntp.brd"
(require "BaseLang" importAll)
(require "Queue" importAll)

(defFunct	[ClonePart $list $limit]
	(if	[< 0 $limit]
		(cons	[car $list]
				[ClonePart
					(cdr $list)
					(- $limit 1)])
		null)
)

(defFunct	[FileIterator $path]
	(define $file (fsOpen $path `Read `Open))
	(lambda [] [char: (fsRead $file)])
)

(defFunct	[GroupsIterator $limit $iter]
	(define $group (QueMake))
	(define $i $limit)
	(while	[< 0 $i]
			[dec! $i]
			[QuePush $group ($iter)])
	
	(set! $i 0)

	(defFunct	[Self]
		(if	[< $i $limit]
			[block
				(inc! $i)
				(ClonePart (QueGetList $group) $i)]
			[block
				(set! $i 0)
				(QuePop $group)
				(QuePush $group ($iter))
				(Self)
			]
		)
	)
	Self
)

(defFunct	[StrBlockIterator $iter]
	(lambda [] (strCreate ($iter)))
)

(define $iter (StrBlockIterator (GroupsIterator 10 (FileIterator "ntp.brd"))))

(define $i 50)
(while (< 0 $i)
	(dec! $i)
	(print $i ": " ($iter))
)

;
;
;	То что реально нужно сделать - считать группы.
;	Когда выделилась некоторая группа с очень большой частотой - начинать её выделять и отрывать
;	То есть если есть группы " " " а" " ак" " акв" " аква"
;	и первая группа " " (пробел) имеет наивысшую частоту
;	то при последующем парсинге уже не порождать группы " а" " ак" " акв" " аква"
;	а сразу переходить к "а" "ак" "акв" "аква"
;	таким образом постепенно сформируется некое множество устойчивых групп, с которыми можно уже работать дальше
;	И порождать следующий слой с группами групп
;	И так далее до достижения астрала
;
;
;
;
;










