# Здесь уже обработаны все базовые препроцессинги
# и мы имеем дела с полной базовой версией языка


(define LookUpModule (lambda [$name]
	(fs.lookup
		bootPath
		(GetCurrentModuleFolder)
		"modules"
		"module.brd"
		$name)
))

(define LoadModule (lambda [$path]
	(define @module (GetModule $path))
	(if [not (null? @module)]
		[block
			(define $status (table.get @module `status))
			(if [eq? `loading $status]
				[error (string.concat "Module '" $path "' is loading! Check recursive requires and preprocessors!")]
				@module)
		]
		[LoadModuleFromFile $path]
	)
))

# Эти директивы идут в начале файла и должны исполняться не как код а обработчиком
# (preprocess null)
# (preprocess default)
# (preprocess (mod prep))
# (preprocess (mod prep1 prep2 prep3) .. )
# (preprocess (mod1 prep1) (mod2 prep2) (mod3 prep3) .. )
# (preprocess default (mod1 prep1) (mod2 prep2) (mod3 prep3) .. )
(define ParsePreprocessors (lambda [$items]
	(define preprocessors null)
	(each $items (lambda [$item]
		(if [eq? `default $item]
			[set! preprocessors (cons DefaultPreprocess preprocessors)]
			[block
				(define $module_name (car $item))
				(define $module_preprocessors (cdr $item))
				(define $path (LookUpModule $module_name))
				(define @module (LoadModule $path))
				(each $module_preprocessors (lambda [$name]
					(define $preprocessor (table.get @module.context.export $name))
					(set! preprocessors (cons $preprocessor preprocessors))
				))
			]
		)
	))
	(reverse preprocessors)
))

# Эти директивы уже могут быть уже просто вызовами
(define RequireModuleDirective (macros $args
	(define $module_name (car $args))
	(set! $args (cdr $args))
	(if [not (or
			(string? $module_name)
			(symbol? $module_name))]
		[error "require expects string or symbol!"]
		[block
			(define $context $currentModule.context)
			(define $path (LookUpModule $module_name))
			(if [null? $path]
				[define @module (GetModule $module_name)]
				[define @module (LoadModule $path)]
			)
			(if [null? @module]
				(error (string.concat "Module '" $module_name "' not found!"))
			)
			(define @export @module.context.export)
			(cond
				[(null? $args)
					# (require "ModuleName")
					(table.set $context $module_name @export)
				]
				[(eq? `as (car $args))
					# (require "ModuleName" as NewName)
					(table.set $context (cadr $args) @export)
				]
				[(eq? `import (car $args))
					# (require "ModuleName" import name1 name2 name3 ...)
					(table.import @export $context (cdr $args))
				]
				[(eq? `importAll (car $args))
					# (require "ModuleName" importAll)
					(table.importAll @export $context)
				]
			)
			@export
		]
	)
))

(define LoadModuleFromFile (lambda [$path]
	# 1 создаём новый контейнер модуля
	(define @module (CreateModule $path))

	# 2 грузим модуль вместе с рекурсивными вызовами TryGetModule
	(define $content (fs.load $path))
	(define $head (car $content))

	# 2.1 Если есть препроцессоры - применяем
	(if [eq? `preprocess (car $head)]
		[block
			(define $preprocessors (ParsePreprocessors (cdr $head)))
			(set! $content (PackApply $preprocessors (cdr $content)))
		]
		[define $preprocessors (cons DefaultPreprocess null)]
	)
	(set! $content (PackApply $preprocessors $content))

	# 2.2 добавляем require в качестве исходной команды, доступной везде
	(table.set @module.context `require RequireModuleDirective)

	# 2.3 исполняем само содержимое в контексте модуля
	(evalEach @module.context $content)

	# 4 убираем модуль из стека и помечаем загруженным
	(CompleteModule)

	# 5 возвращаем его
	@module
))

